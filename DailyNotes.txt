
Language:
	english,telugu,tamil...communication
	
	
Programming Language:	
	communication with machine 

POP 						OOP
B,BCPL,C,COBOL,PHOTON...	C++,JAVA,PYTHON,.NET...

	
	python general purpose high level language 

	guido van rossam 1989
	

	feb 20th 1991

	syntax
 Java 53
 public class Test
 {
 public static void main(String args[])
 {
 System.out.println("welcome to java");
 }
 }

python
print("welcome to python")

33 keywords

functional programming  features from C
Object Oriented Features  C++
Scripting Language features from shell script
moduler programming Modula-3
C,ABC


1)desktop/standalone apps  ex: notepad++,anti virus,media player / corepython,tkinter
2)web application			ex:gmail,amazon,flipkart...			/Django,Flask
3)database applications     PDBC
4)networking programming
5)gaming apps
6)Data Analysis
7)ML
8)IOT
9)AI ....

Features:
simple and easy to learn
free source and open force jython
high language 
portability/platform independent WORA
dynamic typed  static typed byte age=32
Interpreted	(PVM)
rich set of library

	flavours
	
	cpython
	jython
	IronPython
	PyPY
	RubyPython
	AnacondaPython

1.x 1991
2.x 2000
3.x 2008



import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue',
 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from',
 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or',
 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


identifiers
	 any name in python will call it as identifier 
	 
	 a-z
	 A-z
	 0-9 we can use digit but we can't start with digit  
	 _
	 
	 _password-->private
	 __xyz
	 __abc__
identation

variables
	variables are names given to the memeory location
	
		sandeep trainer 9449494949



datatypes

		int
		float
		complex
		bool
		str
		range
		bytes
		bytesarray
		
		list
		tuple
		set
		frozenset
		dict
		none
		
type()
print()
id()


slice -->a piece
[]

0
accenture
+ve 
-ve

flow control
					-2-1
			accenture
			012345678

type casting

	int()
	float()
	complex()
	bool()
	str()

all these are immuttable

		list
		tuple
		set
		frozenset
		dict
List:
	1)duplicates are allowed 
	2)insertion order is preserved
	3)both homogeneous and heterogeneous data  allowed
	4)growable in nature 
	5)[] square brackets
	6)list is muttable
names=["suresh","mahesh","rajesh","naresh","hitesh","somesh","mahesh"]
>>> type(names)
<class 'list'>
>>> print(names)
['suresh', 'mahesh', 'rajesh', 'naresh', 'hitesh', 'somesh', 'mahesh']
>>> names=["suresh","mahesh",12.54,"rajesh","naresh",123,"hitesh","somesh","mahesh"]
>>> print(names)
['suresh', 'mahesh', 12.54, 'rajesh', 'naresh', 123, 'hitesh', 'somesh', 'mahesh']
>>> names.append("accenture")
>>> print(names)
['suresh', 'mahesh', 12.54, 'rajesh', 'naresh', 123, 'hitesh', 'somesh', 'mahesh', 'accenture']
>>> names.remove("mahesh")
>>> print(names)
['suresh', 12.54, 'rajesh', 'naresh', 123, 'hitesh', 'somesh', 'mahesh', 'accenture']
>>> list1=[12,23,29,34,12]
>>> print(list1)
[12, 23, 29, 34, 12]
>>> list1[0]
12
>>> list1[2]
29
>>> list1[-1]
12
>>> list1[-2]
34
>>> list1[1:3]
[23, 29]


Tuple:
	1)duplicates are allowed 
	2)insertion order is preserved
	3)both homogeneous and heterogeneous data  allowed
	4)fixed in nature 
	5)()
	6)tuple is imuttable
	

>>> ids=(21,45,22,87,54,21,99)
>>> type(ids)
<class 'tuple'>
>>> print(ids)
(21, 45, 22, 87, 54, 21, 99)
>>> ids.append(1234)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> ids.remove(45)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'remove'
>>> ids=(21,45,22,87,54,21,99,'suresh','mahesh')
>>> print(ids)
(21, 45, 22, 87, 54, 21, 99, 'suresh', 'mahesh')



Set:
	1)duplicates are not allowed 
	2)insertion order is not preserved
	3)both homogeneous and heterogeneous data  allowed
	4)growable in nature 
	5){}
	6)set is muttable
	
	dict-->k,v
	
FrozenSet:
	1)duplicates are not allowed 
	2)insertion order is not preserved
	3)both homogeneous and heterogeneous data  allowed
	4)fixed in nature 
	5)({})
	6)frozenSet is imuttable
	
	dict-->k,v


	{"eid",:123,"ename:"mahesh"}
	
 fs=frozenset(list)
>>> print(fs)
frozenset({32, 21, 22, 12, 44})
>>> for i in fs:print(i)
...
32
21
22
12
44

Dict:
to represent objects as a key and value pair
	key must be unique and value can be dupllicate

>>> dictex={123:'sandeep',124:'mahesh'}
>>> type(dictex)
<class 'dict'>
>>> print(dicrex)
print(dictex[123])
sandeep

IDE 
	
	STRING FORMAT IN PRINT
	
	
	OOPS
		s		-->code reusability -->memory
		polymorphisam
		encapsulation
		abstraction
	
	class is template --->variables methods	
	class A:
	
	class X(A):
	
		20 functions
	
	
	class Y(X):				class B(X):
		
		3 functions		2 functions
	
	
	
	
	class A:      class B:
	
	m1				m1
	
	
	
			class C(B)(A)
	
	name="mahesh"
	name=''
	
	exception handling
	
	Limitations
		1)System defined error messages 
		2)abnormal termination
		
		
		1
		2
		3	error -->stop execution-->abnormal termination
		
		
		
		
		
		1000
		Advantages
		
		1)user friendly error messages 
		2)normal termination
	
	
	2 types
	syntax errors
	runtime errors-->invalid input
	
	a=10
	if a==10:
		print("valid")
	
	
	
								BaseException
							
							
			Exception	SystemExit  GeneratorExit  KeywordInterrupt	
	
	AttributeError  ArithmeticError EOFError NameError OSError LookUpError  TypeError ValueError
		
						ZDE								FNFE	    IE
						FPE								IE			KE
						OE								PE
														TOE
	
	try			error code
	except		handling code
	raise		to raise explicitly
	finally     cleanup code 
	
	
	combinations
	
only	try    		 	    		    invalid
only	except   	 	    			invalid
only	finally   	  	     			invalid
		try & except					 valid
		try & finally					 valid
		try except else 	 			valid
		try  else 	         			invalid
		try  else  except    			invalid
		try  finally  except		 	invalid
		try  except finally 			 valid
		try  except finally finally  	invalid
		try  except except finally  	valid
		try  except print("hi")finally  invalid
		try  except try except          valid
		try  (try except) except        valid
		try   except(try except)        valid
		
	
	
	
	InvalidCrendential		-->Raise 
	PasswordError
	NameLength
	
	
	file operations:
	---------------
	
	
	
	
	multi threading 
	
	multi tasking is a process of executing several tasks simultaniously
	
			Process based multi tasking
				
				executing several tasks simultaniously where each task is seperate independent process
			
			Thread based multi tasking /multi threading
				executing several tasks simultaniously where each and every task belongs to same process

	
	1)without any class
	2)extending Thread
	3)without extending Thread class
	
	threading 
	
	
	mysql pdbc
	
	
	
	
	regular expressions 
		validation
		
		
		Webservices:which is used to make communication between two interoperable applications
		
			REST
			
					
			ATM  <---> XBank 
			
			RMI,EJB,SP-->java <-->java
			DCOM			.net<-->.net	
			RPC				c<-->c/c++
			CORBA
			webservices
				SOAP		-->XML
				REST		-->XML,JSON,PT,HTML,JS
					
			
			
			
			HTTP
				Get -->fetch
				Post-->insert/new resource
				put -->update
				Delete-->removal
						JSON
			app1(python) <--->app2(java)
			
			emp=Employee(123,"sandeep",21000,"hyderabad")
			
			{
			"eid":123,
			"ename":"sandeep"
			"esal":21000
			"eadd":"hyderabad"
			}
			
			
	Django 2003-2005
	
	server 
	
	sqlite3
	
	MVT-->model view template
	
	
	py -V
	pip -V
	
	py -m pip install virtualenvwrapper-win  #installing virtualen for django apps
	
	mkvirtualenv my_dajngo_environment		#creating virtual environment
	
	py -m pip install django~=4.2			#Install django
	
	py -m django --version					#checking dajngo version
	
	django-admin startproject mytestdajngo  #creating Django project
	
	cd mytestdajngo							#get inside project
	
	py manage.py runserver					#run django project

	py manage.py startapp employees			#to create apps 
	
	py manage.py makemigrations
	
	py manage.py migrate